# Напишите программу, которая считывает со стандартного ввода целые числа, по одному 
# числу в строке, и после первого введенного нуля выводит сумму полученных на вход чисел.
# n=int(input())
# s=0
# while n!=0:
#     s+=n
#     n=int(input())
# print(s)



# В Институте биоинформатики между информатиками и биологами устраивается соревнование. 
# Победителям соревнования достанется большой и вкусный пирог. В команде биологов 
# �
# a человек, а в команде информатиков — b человек.

# Нужно заранее разрезать пирог таким образом, чтобы можно было раздать кусочки 
# пирога любой команде, выигравшей соревнование, при этом каждому участнику этой команды 
# должно достаться одинаковое число кусочков пирога. И так как не хочется резать пирог на 
# слишком мелкие кусочки, нужно найти минимальное подходящее число.

# Напишите программу, которая помогает найти это число.
# Программа должна считывать размеры команд (два положительных целых числа a и b, каждое число 
# вводится на отдельной строке) и выводить наименьшее число d, которое делится на оба этих числа без остатка.
# a=int(input())
# b=int(input())
# max=a*b
# i=1
# while i<=max:
#     if (i%a==0 and i%b==0):
#         print(i)
#         break
#     i+=1



# Напишите программу, которая считывает целые числа с консоли по одному числу в строке.

# Для каждого введённого числа проверить:
# если число меньше 10, то пропускаем это число;
# если число больше 100, то прекращаем считывать числа;
# в остальных случаях вывести это число обратно на консоль в отдельной строке.

# n=10
# while n<=100:
#     n=int(input())
#     if (n>=10 and n<=100):
#         print(n) 
#     if n>100:
#         break
#     else:
#         continue


# Когда Павел учился в школе, он запоминал таблицу умножения прямоугольными блоками. 
# Для тренировок ему бы очень пригодилась программа, которая показывала бы блок таблицы умножения.
# Напишите программу, на вход которой даются четыре числа a, b, c и d, каждое в своей строке. 
# Программа должна вывести фрагмент таблицы умножения для всех чисел отрезка [a;b] на все числа отрезка [c;d].
# Числа a, b, c и d являются натуральными и не превосходят 10, a≤b, c≤d.
# Следуйте формату вывода из примера, для разделения элементов внутри строки 
# используйте '\t' — символ табуляции. Заметьте, что левым столбцом и верхней строкой 
# выводятся сами числа из заданных отрезков — заголовочные столбец и строка таблицы

# a=int(input())
# b=int(input())
# c=int(input())
# d=int(input())
# i=a
# j=c
# print(end='\t')
# for j in range (c,d+1):
#     print(j, end='\t')
#     j+=1
# print()
# for i in range (a,b+1):
#     print(i, end='\t')
#     for j in range(c,d+1):
#         print(i*j, end='\t')
#         j+=1
#     print()
#     i+=1


# Напишите программу, которая считывает с клавиатуры два числа a и b, 
# считает и выводит на консоль среднее арифметическое всех чисел 
# из отрезка [a;b], которые кратны числу 3.
# В приведенном ниже примере среднее арифметическое считается для чисел 
# на отрезке [−5;12][−5;12]. Всего чисел, делящихся на 3, на этом 
# отрезке 6: −3,0,3,6,9,12−3,0,3,6,9,12. Их среднее арифметическое равно 4.5
# На вход программе подаются интервалы, внутри которых всегда есть 
# хотя бы одно число, которое делится на 3.

# a=int(input())
# b=int(input())
# s=0.0
# k=0.0
# for i in range (a,b+1):
#     if i%3==0:
#         s+=i
#         k+=1
#     i+=1
# print(s/k)  


# GC-состав является важной характеристикой геномных последовательностей и 
# определяется как процентное соотношение суммы всех гуанинов и цитозинов к 
# общему числу нуклеиновых оснований в геномной последовательности.
# Напишите программу, которая вычисляет процентное содержание символов G (гуанин)
# и C (цитозин) в введенной строке (программа не должна зависеть от регистра вводимых символов).
# Например, в строке "acggtgttat" процентное содержание символов G и C 
# равно 4/10⋅100=40.0, где 4 -- это количество символов G и C,  а 10 -- это длина строки.

# sostav=input()
# s=0.0
# slovo=sostav.lower()
# for i in slovo:
#     if (i=='g' or i=='c'):
#         s+=1      
# print(s/len(slovo)*100)



# Узнав, что ДНК не является случайной строкой, только что поступившие в Институт 
# биоинформатики студенты группы информатиков предложили использовать алгоритм сжатия, который сжимает повторяющиеся символы в строке.
# Кодирование осуществляется следующим образом:
# s = 'aaaabbсaa' преобразуется в 'a4b2с1a2', то есть группы одинаковых символов 
# исходной строки заменяются на этот символ и количество его повторений в этой позиции строки.
# Напишите программу, которая считывает строку, кодирует её предложенным алгоритмом 
# и выводит закодированную последовательность на стандартный вывод. Кодирование должно учитывать регистр символов.

# s=input()
# ns=1
# i=0
# j=1-len(s)
# for i in range (0,len(s)):
#     if (s[i]==s[j]):
#         if (j!=0):
#             ns+=1
#             j+=1
#             i=i+1
#         else:
#             print(f'{s[i]}{ns}', end='')
    
#     else:
#         print(f'{s[i]}{ns}', end='')
#         i=i+1
#         j+=1
#         ns=1
    
    
    
    
